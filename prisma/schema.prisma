// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  M
  F
  Other
}

enum MpesaTransactionType {
  PAY_BILL
  TILL_NUMBER
}

enum RiderStatusEnum {
  PENDING
  APPROVED
  SUSPENDED
}

model User {
  first_name   String
  last_name    String
  phone        String    @unique
  password     String
  salt         String
  avatar       String?
  email        String?   @unique
  address      String?
  gender       Gender?
  dateCreated  DateTime
  updatedAt    DateTime?
  sessionToken String? 
  id           String    @id @default(uuid())
  OTP UserOTP?
  rides Ride[] @relation("UserRides") // Define the one-to-many relationship with the Ride model


  @@map("users")
}
model UserOTP {
  id      String  @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String   @unique
  phone String @unique
  code    String

  @@map("user_otps")
}

model Rider {
  first_name   String
  last_name    String
  phone        String          @unique
  password     String
  salt         String
  avatar       String?
  email        String?         @unique
  address      String?
  gender       Gender?
  riderStatus  RiderStatus?
  sessionToken String?
  dateCreated  DateTime
  updatedAt    DateTime?
  id           String    @id @default(uuid())
  profile RiderProfile?
  rides Ride[] @relation("RiderRides")
  @@map("riders")
}

model RiderProfile {
id String @id @default(uuid())
rider Rider @relation(fields: [riderId], references: [id], onDelete: Cascade)
riderId String @unique
avatar String?
address String?
gender Gender?
documents RiderDocuments?
bikeInformation BikeInformation?
location String


@@map("rider_profiles")
}

model RiderStatus {
  // todo ensure message is nullable, cca_id and status pending, should unique
  // todo rider status shoould only occur once in each state
  status     RiderStatusEnum    @default(PENDING)
  message    String?
  created_at DateTime           @default(now())
  rider      Rider              @relation(fields: [rider_id], references: [id], onDelete: Cascade)
  rider_id   String             @unique
  cca        CustomerCareAgent? @relation(fields: [cca_id], references: [id], onDelete: Cascade)
  cca_id     String?
  id         String             @id @default(uuid())

  @@map("rider_status")
}

model BikeInformation {
  id String @id @default(uuid())
  rider RiderProfile @relation(fields: [riderId], references: [riderId], onDelete: Cascade)
  riderId String @unique
  bikeType String
  plateNumber String
  bikePhoto String?
  insuranceProvider String
  insurancePolicyNumber String
 

  @@map("bike_information")
}

//stores each document and its secure cloudinary link.
model RiderDocuments{
  ID_front String?
  ID_back String?
  good_conduct String?
  birth_certificate String?
  license String?
  insurance String?

  rider RiderProfile @relation(fields: [riderId], references: [id], onDelete: Cascade)
  riderId String @unique
  id String @id @default(uuid())
  @@map("rider_documents")

}
model CustomerCareAgent {
  first_name    String
  last_name     String
  email         String                       @unique
  password      String
  salt          String
  created_at    DateTime                     @default(now())
  updated_at    DateTime?
  is_active     Boolean                      @default(false)
  verified      Boolean                      @default(false)
  token         CustomerCareAgentToken?
  riderApproval RiderStatus[]
  reset_token   CustomerCareAgentResetToken?
  sessionToken  String?
  id            String                       @id @default(uuid())

  @@map("customer_care_agent")
}

model CustomerCareAgentToken {
  user   CustomerCareAgent @relation(fields: [userId], references: [id], onDelete: Cascade)
  token  String
  userId String            @unique
  id     String            @id @default(uuid())

  @@map("customer_care_agent_token")
}

model MpesaPayBillPayments {
  transaction_type MpesaTransactionType
  trans_id         String               @unique
  trans_time       DateTime
  trans_amount     Decimal              @db.Money
  bill_ref_number  String?
  sender_msisdn    String
  sender_name      String?
  org_account_balance Decimal              @db.Money
}

model CustomerCareAgentResetToken {
  user   CustomerCareAgent @relation(fields: [userId], references: [id], onDelete: Cascade)
  token  String
  userId String            @unique
  id     String            @id @default(uuid())

  @@map("customer_care_agent_reset_token")
}

enum TripStatus {
  PENDING
  ASSIGNED
  ENROUTE
  CANCELLED
  COMPLETED
}



model Ride{
  id String @unique @id @default(uuid())
  pickupPointLat Float
  pickupPointLong Float
  destinationLat Float
  destinationLong Float
  status TripStatus
  startTime DateTime?
  endingTime DateTime?
  durationTaken Int? 
  userId String
  user User? @relation("UserRides", fields: [userId], references: [id], onDelete: Cascade)
  riderId String?
  rider Rider? @relation("RiderRides", fields: [riderId], references: [id], onDelete: Cascade)
  currentLocationLat Float?
  currentLocationLong Float?
  

  @@map("rides")
}